name: Continuous Delivery to the Replicated platform

on:
  push:
    paths:
    - '**'
    - '!**.md'
    - '!doc/**'
    - '!**.png'

jobs:
  package-chart:
    runs-on: ubuntu-latest
    outputs:
      package: ${{ step.package-helm-chart.outputs.package }}
    steps:
    - uses: actions/checkout@v3
    - name: Get release channel
      id: get-channel
      shell: bash
      run: |
        if [[ ${GITHUB_REF_NAME} == "main" ]] ; then
          echo "channel=Unstable" >> $GITHUB_OUTPUT
        fi 
        echo "channel=${GITHUB_REF_NAME}"
    - name: Get short SHA sum
      id: get-short-rev
      shell: bash
      run: echo "short-shar=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
    - name: Get the expected chart version
      id: get_chart_version
      uses: mikefarah/yq@master
      with:
        cmd: yq '.version' Chart.yaml
    - name: Package Helm chart with a build-specific version
      id: package-helm-chart
      run: |
        mkdir -p release
        version=${{ steps.get-chart-version.outputs.result }}-build+${{ steps.get-short-sha.outputs.short-sha }}
        helm package . --version="${version}" -u 
        echo "package=gitea-${version}.tgz" >> $GITHUB_OUTPUT

  # Create a Replicated release without promoting to a channel. The Replicated
  # CLI isn't super scripting friendly when it comes to creating releases, so
  # this job uses a few different calls with curl instead.
  create-release:
    runs-on: ubuntu-latest
    needs: package-chart
    outputs:
      sequence: ${{ steps.create-release.outputs.sequence }}
    steps:
    - name: Get the application ID
      id: get-app-id
      run: |
        # use the reoplicated api and filter down the reults to get the applicationm ID
        # based on the providded app slug
        app_id = $(curl --location 'https://api.replicated.com/vendor/v3/apps' \
                        --header 'Accept: application/json' \
                        --header "Authorization: ${REPLICATED_API_TOKEN}" \
                      | jq --arg slug ${REPLICATED_APP} '.apps[] | select ( .slug == $slug ) | .id')
        echo "app-id=${app_id}" >> $GITHUB_OUTPUT
      env:
        REPLICATED_API_TOKEN: ${{ inputs.api-token }}
        REPLICATED_APP: ${{ inputs.app-slug }}
    - name: Encode Helm chart
      id: encode-chart
      run: |
        echo "content=$(base64 -w 0 ${CHART})" >> $GITHUB_OUTPUT
      env: 
        CHART: ${{ inputs.chart }}
    - name: Prepare release spec
      id: prepare-spec
      run:
        spec_gzip=$(jq --arg chart "${CHART}" --arg content "${CONTENT}" '[{ "name": $chart, "path": $chart, "content": $content }]' \
          | gzip --to-stdout \
          | base64)
        echo "spec_gzip=${spec_gzip}" >> $GITHUB_OUTPUT
      env:
        CHART: ${{ inputs.chart }}
        CONTENT: ${{ step.encode-chart.outputs.content }}
    - name: Create the release
      id: create-release
      run:
        body=$(jq --arg spec_gzip "${SPEC_GZIP}" '{ "spec_gzip": $spec_gzip }'
        sequence=$(curl --location "https://api.replicated.com/vendor/v3/app/${APP_ID}/release" \
                      --header 'Content-Type: application/json' \
                      --header 'Accept: application/json' \
                      --header "Authorization: ${REPLICATED_API_TOKEN}" \
                      --data "${body}" \
                    | jq .release.sequence )
        echo "sequence=${sequence}" >> $GITHUB_OUTPUT
      env:
        SPEC_GZIP: ${{ step.prepare-spec.outputs.spec_gzip }}

  promote-release:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v3
      - name: Get the channel for the release
        id: get-channel
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]] ; then 
            echo "channel=Unstable" >> $GITHUB_OUTPUT
          fi
          echo "channel=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
      - name: Promote the release
        id: promote-release
        uses: docker://replicated/vendor-cli:latest
        with:
          args: release promote ${{ steps.create-release.outputs.sequence }} ${{ steps.get-channel.outputs.channel }}
        env:
          REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}
          REPLICATED_APP: ${{ secrets.REPLICATED_APP }}


